{"version":3,"sources":["components/UserContext/UserContext.js","components/UserContext/index.js","components/UserContext/User.js","components/Stitch/StitchContext.js","components/Stitch/index.js","components/Stitch/Stitch.js","components/Home.js","components/SignUp/index.js","components/SignIn/index.js","components/ConfirmEmail.js","components/ResetPassword.js","components/NavbarAuthentication/NavNonAuth.js","components/NavbarAuthentication/NavAuth.js","components/NavbarAuthentication/index.js","components/Navbar.js","components/Button.js","components/FirstLoginData.js","components/Communications/index.js","components/App.js","serviceWorker.js","index.js"],"names":["UserContext","React","createContext","withUserContext","Component","props","Consumer","user","User","updateUser","arg","this","StitchContext","withStitch","stitch","StitchClass","logInAnonymously","a","client","auth","loginWithCredential","AnonymousCredential","then","console","log","addUserData","args","callFunction","result","signUpEmailPassword","authData","emailPassClient","getProviderClient","UserPasswordAuthProviderClient","factory","registerWithEmail","email","password","catch","err","SignInEmailPassword","credentials","UserPasswordCredential","confirmMail","token","tokenId","Stitch","defaultAppClient","confirmUser","stitchApp","initializeDefaultAppClient","mongodb","getServiceClient","RemoteMongoClient","INITIAL_STATE","username","passwordOne","passwordTwo","error","onSubmit","event","state","trim","onChange","setState","target","name","value","isInvalid","e","preventDefault","class","className","type","placeholder","disabled","message","inputChangeHandler","input","SignInHandler","label","config","onClick","confirmed","queryParams","URLSearchParams","location","search","get","queryUrl","window","to","NavAuth","activeUserAuthInfo","userId","userProfile","data","Navbar","styleBackground","navbarClass","theme","background","boxShadow","style","CommunicationsPage","updateUserData","currentUser","refreshCustomData","basename","path","SignIn","component","ConfirmEmail","Boolean","hostname","match","Index","Provider","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dec38cd7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst UserContext = React.createContext(null);\n\nexport const withUserContext = (Component) => (props) => (\n  <UserContext.Consumer>\n    {(user) => <Component {...props} user={user} />}\n  </UserContext.Consumer>\n);\n\nexport default UserContext;\n","import UserContext, { withUserContext } from \"./UserContext\";\nimport User from \"./User\";\nexport default User;\n\nexport { UserContext, withUserContext };\n","class User {\n  constructor() {\n    this.user = false;\n  }\n  updateUser = (arg) => {\n    this.user = arg;\n  };\n}\n\nexport default User;\n","import React from \"react\";\n\nconst StitchContext = React.createContext(null);\n\nexport const withStitch = (Component) => (props) => (\n  <StitchContext.Consumer>\n    {(stitch) => <Component {...props} stitch={stitch} />}\n  </StitchContext.Consumer>\n);\n\nexport default StitchContext;\n","import StitchContext, { withStitch } from \"./StitchContext\";\nimport StitchClass from \"./Stitch\";\nexport default StitchClass;\n\nexport { StitchContext, withStitch };\n","import {\n  Stitch,\n  AnonymousCredential,\n  UserPasswordAuthProviderClient,\n  UserPasswordCredential,\n  RemoteMongoClient,\n  BSON,\n} from \"mongodb-stitch-browser-sdk\";\n\nclass StitchClass {\n  constructor() {\n    /*if (process.env.APP_ID) {\n      this.appId = process.env.APP_ID;\n    }*/\n    this.stitchApp = Stitch.initializeDefaultAppClient(\n      \"employeemanagementstitch-xrbnw\"\n    );\n    this.client = Stitch.defaultAppClient; //eh client mongodb stitch naal communicate karu\n    this.mongodb = this.stitchApp.getServiceClient(\n      RemoteMongoClient.factory,\n      \"mongodb-atlas\"\n    ); //eh database nu access karan vste aa\n  }\n  logInAnonymously = async () => {\n    let user = await this.client.auth\n      .loginWithCredential(new AnonymousCredential())\n      .then((user) => {\n        //this.props.user.updateContext(user);\n        console.log(user);\n        return user;\n      });\n    return user;\n  };\n\n  addUserData = async (args) => {\n    this.client.callFunction(\"AddNewUserData\", [args]).then((result) => {\n      console.log(result);\n    });\n  };\n\n  signUpEmailPassword = async (authData) => {\n    const emailPassClient = this.client.auth.getProviderClient(\n      UserPasswordAuthProviderClient.factory\n    );\n    console.log(emailPassClient);\n    let err = await emailPassClient\n      .registerWithEmail(authData.email, authData.password)\n      .then((result) => {\n        if (result) {\n          console.log(\"Sign Up Successful\");\n          console.log(result);\n        }\n        return result;\n      })\n      .catch((err) => {\n        console.log(\"An error occurred!\");\n        console.log(err);\n        return err;\n      });\n    return err;\n  };\n\n  SignInEmailPassword = async (authData) => {\n    const credentials = new UserPasswordCredential(\n      authData.email,\n      authData.password\n    );\n    let user = await this.client.auth\n      .loginWithCredential(credentials)\n      .then((result) => {\n        console.log(\"Sign In Successful\");\n        console.log(result);\n        return result;\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    return user;\n  };\n  confirmMail = async (token, tokenId) => {\n    const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(\n      UserPasswordAuthProviderClient.factory\n    );\n    let result = await emailPassClient\n      .confirmUser(token, tokenId)\n      .then(() => {\n        return true;\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    return result;\n  };\n}\n\n//export default withUserContext(StitchClass);\nexport default StitchClass;\n","import React, { Component } from \"react\";\nimport { withUserContext } from \"./UserContext\";\nimport { withStitch } from \"./Stitch\";\n\nclass Home extends Component {\n  componentDidMount() {\n    console.log(this.props);\n  }\n  render() {\n    return (\n      <div>\n        <div>this is home page </div>\n      </div>\n    );\n  }\n}\nlet HomeWithUser = withUserContext(Home);\nexport default withStitch(HomeWithUser);\n","import React, { Component } from \"react\";\nimport {\n  Stitch,\n  UserPasswordAuthProviderClient,\n  UserPasswordCredential,\n} from \"mongodb-stitch-browser-sdk\";\n\nimport { withUserContext } from \"../UserContext\";\nimport { withStitch } from \"../Stitch\";\n\nconst INITIAL_STATE = {\n  username: \"\",\n  email: \"\",\n  passwordOne: \"\",\n  passwordTwo: \"\",\n  error: null,\n};\n\nclass SignUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...INITIAL_STATE };\n  }\n  onSubmit = async (event) => {\n    if (\n      this.state.email.trim() === \"\" ||\n      this.state.passwordOne.trim() === \"\" ||\n      this.state.passwordTwo.trim() === \"\"\n    ) {\n      console.log(\"incomplete form\");\n      return;\n    }\n    if (this.state.passwordOne != this.state.passwordTwo) {\n      console.log(\"paswords not same\");\n      return;\n    }\n    //console.log(authData);\n    let user = await this.props.stitch\n      .signUpEmailPassword({\n        email: this.state.email,\n        password: this.state.passwordOne,\n      })\n      .then((user) => {\n        console.log(user);\n        return user;\n      });\n    /*let login = await this.props.stitch.SignInEmailPassword({\n      email: this.state.email,\n      password: this.state.passwordOne,\n    });*/\n    console.log(user);\n    //this.props.user.updateUser(user);\n    //console.log(login);\n    //console.log(\"before\");\n    //this.props.stitch.addUserData(this.state.username);\n    //console.log(\"after\");\n  };\n\n  onChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  render() {\n    const {\n      email,\n      passwordOne,\n      passwordTwo,\n\n      error,\n    } = this.state;\n\n    const isInvalid =\n      passwordOne !== passwordTwo || passwordOne === \"\" || email === \"\";\n\n    return (\n      <form\n        onSubmit={(e) => {\n          this.onSubmit();\n          e.preventDefault();\n        }}\n      >\n        <div class=\"row justify-content-center bg-white p-5\">\n          <h1>Sign Up</h1>\n        </div>\n        <div class=\"row justify-content-center bg-white\">\n          <div className=\"col-6\">\n            {/*<input\n              name=\"username\"\n              class=\"col-12 my-2\"\n              value={username}\n              onChange={this.onChange}\n              type=\"text\"\n              placeholder=\"Full Name\"\n            />*/}\n            <input\n              name=\"email\"\n              class=\"col-12 my-2\"\n              value={email}\n              onChange={this.onChange}\n              type=\"text\"\n              placeholder=\"Email Address\"\n            />\n            <input\n              name=\"passwordOne\"\n              class=\"col-12 my-2\"\n              value={passwordOne}\n              onChange={this.onChange}\n              type=\"password\"\n              placeholder=\"Password\"\n            />\n            <input\n              name=\"passwordTwo\"\n              class=\"col-12 my-2\"\n              value={passwordTwo}\n              onChange={this.onChange}\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n            />\n            <button\n              class=\"btn btn-primary col-12 my-2\"\n              disabled={isInvalid}\n              type=\"submit\"\n            >\n              Sign Up\n            </button>\n            {error && <p>{error.message}</p>}\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default withStitch(withUserContext(SignUp));\n","import React, { Component } from \"react\";\nimport {\n  Stitch,\n  UserPasswordAuthProviderClient,\n  UserPasswordCredential,\n} from \"mongodb-stitch-browser-sdk\";\n\nimport { withUserContext } from \"../UserContext\";\nimport { withStitch } from \"../Stitch\";\n\nclass SignUp extends Component {\n  state = { email: \"\", password: \"\" };\n\n  inputChangeHandler = (event, input) => {\n    this.setState({ [input]: event.target.value });\n  };\n  SignInHandler = async () => {\n    let authData = { email: this.state.email, password: this.state.password };\n    if (authData.email.trim() === \"\" || authData.password.trim() === \"\") {\n      return;\n    }\n    let user = await this.props.stitch\n      .SignInEmailPassword(authData)\n      .then((user) => {\n        console.log(user);\n        console.log(this.props.stitch);\n        return user;\n      });\n\n    this.props.stitch.client\n      .callFunction(\"CheckUserData\", [\"hello\"])\n      .then((result) => {\n        console.log(result);\n      });\n    console.log(user);\n    this.props.user.updateUser(user);\n  };\n  render() {\n    return (\n      <main className=\"d-flex m-5 justify-content-center\">\n        <div className=\"row col-sm-12 col-md-9 justify-content-center bg-light shadow p-5\">\n          <div className=\"col-12 text-center display-4\">Sign In</div>\n          <input\n            className=\"col-12 m-1 form-control shadow\"\n            label=\"E-Mail\"\n            config={{ type: \"email\" }}\n            onChange={(event) => this.inputChangeHandler(event, \"email\")}\n          />\n          <input\n            className=\"col-12 mt-1 form-control shadow\"\n            label=\"Password\"\n            config={{ type: \"password\" }}\n            onChange={(event) => this.inputChangeHandler(event, \"password\")}\n          />\n          <button\n            className=\"btn btn-dark m-1 col-6 shadow\"\n            onClick={() => this.SignInHandler()}\n          >\n            Sign In\n          </button>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default withStitch(withUserContext(SignUp));\n","import React, { Component } from \"react\";\nimport { withStitch } from \"./Stitch\";\n\nclass ConfirmEmail extends Component {\n  state = { confirmed: false };\n  componentDidMount() {\n    const queryParams = new URLSearchParams(this.props.location.search);\n    const token = queryParams.get(\"token\");\n    const tokenId = queryParams.get(\"tokenId\");\n    console.log(this.props);\n    this.props.stitch.confirmMail(token, tokenId).then((result) => {\n      console.log(result);\n      this.setState({ confirmed: result });\n    });\n  }\n  render() {\n    if (this.state.confirmed) {\n      return <div>Thank You For Confirming Your Email</div>;\n    } else {\n      return <div>confirming ...</div>;\n    }\n  }\n}\n\nexport default withStitch(ConfirmEmail);\n","import React, { Component } from \"react\";\nimport { withStitch } from \"./Stitch\";\n\nclass ResetPassword extends Component {\n  state = { confirmed: false };\n  componentDidMount() {\n    const queryUrl = window.location.search;\n    const queryParams = new URLSearchParams(queryUrl);\n    const token = queryParams.get(\"token\");\n    const tokenId = queryParams.get(\"tokenId\");\n    /*const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(\n      UserPasswordAuthProviderClient.factory\n    );\n    emailPassClient\n      .confirmUser(token, tokenId)\n      .then()\n      .catch((err) => {\n        console.log(err);\n      });*/\n  }\n  render() {\n    if (this.state.confirmed) {\n      return <div>Thank You For Confirming Your Email</div>;\n    } else {\n      return <div>confirming ...</div>;\n    }\n  }\n}\n\nexport default withStitch(ResetPassword);\n","import React, { Component } from \"react\";\nimport { withUserContext } from \"../UserContext\";\nimport SignUp from \"../SignUp\";\nimport SignIn from \"../SignIn\";\nimport { Link } from \"react-router-dom\";\n\nclass NavNonAuth extends Component {\n  render() {\n    return (\n      <div>\n        <Link to=\"/SignUp\" className=\"btn btn-dark my-2 my-sm-0\">\n          Sign Up\n        </Link>\n        <Link to=\"/SignIn\" className=\"btn btn-dark my-2 my-sm-0\">\n          Sign In\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default withUserContext(NavNonAuth);\n","import React, { Component } from \"react\";\n\nclass NavAuth extends Component {\n  render() {\n    return (\n      <div>\n        <button className=\"btn btn-dark\">{this.props.email}</button>\n      </div>\n    );\n  }\n}\n\nexport default NavAuth;\n","import React, { Component } from \"react\";\nimport Navbar from \"../Navbar\";\nimport { withUserContext } from \"../UserContext\";\nimport NavNonAuth from \"./NavNonAuth\";\nimport NavAuth from \"./NavAuth\";\nimport { withStitch } from \"../Stitch\";\nclass NavbarAuthentication extends Component {\n  state = { user: null };\n  /*componentDidUpdate(prevProps) {\n    console.log(\"prev props\");\n    console.log(prevProps);\n    console.log(\"current props\");\n    console.log(this.props);\n    if (this.state.user != this.props.stitch.client) {\n      console.log(\"updating user\");\n      this.setState({ user: this.props.stitch.client });\n    }\n  }*/\n  render() {\n    // if (this.state.user != this.props.stitch.client) {\n    //   this.setState({ user: this.props.stitch.client });\n    // }\n    console.log(this.props.stitch.client);\n    //if (this.state.user == null || this.state.user == false) {\n    if (this.props.stitch.client.auth.activeUserAuthInfo.userId) {\n      return (\n        <NavAuth\n          email={\n            this.props.stitch.client.auth.activeUserAuthInfo.userProfile.data\n              .email\n          }\n        />\n      );\n    } else {\n      return <NavNonAuth />;\n    }\n  }\n}\n\nexport default withStitch(NavbarAuthentication);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport NavbarAuthentication from \"./NavbarAuthentication\";\nimport Button from \"./Button\";\nclass Navbar extends Component {\n  render() {\n    let styleBackground = {};\n    //let styleButton = {};\n    let navbarClass = \"navbar border-bottom border-secondary \";\n    if (this.props.theme == \"light\") {\n      styleBackground = {\n        background: \"linear-gradient(315deg, #ffffff, #999999)\",\n        boxShadow: \"-5px -5px 10px #666666\",\n      };\n      navbarClass += \"navbar-light\";\n    } else {\n      styleBackground = {\n        background: \"linear-gradient(315deg, #484848, #1f1f1f)\",\n        boxShadow: \"-5px -5px 10px #0e0e0e, 5px 5px 10px #363636;\",\n      };\n      navbarClass += \"navbar-dark\";\n    }\n    /*styleButton = { ...styleBackground };\n    styleButton[\"boxShadow\"] = \"-5px -5px 10px #000000, 5px 5px 10px #ffffff\";\n    styleButton[\"boxShadow\"] = \"-5px -5px 10px #0e0e0e, 5px 5px 10px #363636\";\n    styleButton[\"borderRadius\"] = \"5px\";\n    styleButton[\"border\"] = \"none\";*/\n    return (\n      <div>\n        <nav class={navbarClass} style={styleBackground}>\n          <div className=\"flex flex-grow-1\">\n            <Link class=\"navbar-brand flex-grow-1\">Employee Management</Link>\n          </div>\n          <NavbarAuthentication />\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass Button extends Component {\n  render() {\n    let styleButton = {};\n    if (this.props.theme == \"light\") {\n      styleButton = {\n        background: \"linear-gradient(315deg, #ffffff, #999999)\",\n        boxShadow: \"-5px -5px 10px #666666\",\n      };\n    } else {\n      styleButton = {\n        background: \"linear-gradient(315deg, #484848, #1f1f1f)\",\n        boxShadow: \"-5px -5px 10px #0e0e0e, 5px 5px 10px #363636;\",\n      };\n    }\n    styleButton[\"boxShadow\"] = \"-5px -5px 10px #0e0e0e, 5px 5px 10px #363636\";\n    styleButton[\"borderRadius\"] = \"5px\";\n    styleButton[\"border\"] = \"none\";\n    return (\n      <button\n        onClick={() => {\n          this.props.onClick();\n        }}\n        style={styleButton}\n      >\n        {this.props.text}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport { withStitch } from \"./Stitch\";\n\nclass FirstLoginData extends Component {\n  render() {\n    return <div></div>;\n  }\n}\n\nexport default withStitch(FirstLoginData);\n","import React, { Component } from \"react\";\n\nclass CommunicationsPage extends Component {\n  render() {\n    return <div className=\"bg-dark\">Comms</div>;\n  }\n}\n\nexport default CommunicationsPage;\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { withUserContext } from \"./UserContext\";\nimport { withStitch } from \"./Stitch\";\n\n//import User, { UserContext } from \"./UserContext\";\n//import StitchClass, { StitchContext } from \"./Stitch\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min.js\";\n\nimport Home from \"./Home\";\nimport SignUp from \"./SignUp\";\nimport SignIn from \"./SignIn\";\nimport ConfirmEmail from \"./ConfirmEmail\";\nimport ResetPassword from \"./ResetPassword\";\nimport Navbar from \"./Navbar\";\nimport FirstLoginData from \"./FirstLoginData\";\nimport CommuncationsPage from \"./Communications\";\n\nclass App extends Component {\n  updateUserData = async () => {\n    console.log(this.props.stitch);\n    if (this.props.stitch.client.auth.currentUser) {\n      console.log(\"refreshing user data on page refresh\");\n      let res = await this.props.stitch.client.auth.refreshCustomData();\n      console.log(this.props.stitch.client.auth.currentUser);\n      this.props.user.updateUser(this.props.stitch.client.auth.currentUser);\n      console.log(this.props.user);\n    } else {\n      console.log(\"user not logged in\");\n    }\n  };\n  componentDidMount() {\n    this.updateUserData();\n  }\n\n  render() {\n    return (\n      <Router basename=\"/\">\n        <div>\n          <Navbar />\n          <button\n            onClick={async () => {\n              //let res = await this.props.stitch.client.auth.refreshCustomData();\n              console.log(this.props.stitch.client.auth.currentUser);\n            }}\n          >\n            console.log userdata in app.js\n          </button>\n          <Switch>\n            <Route path=\"/SignUp\">\n              <SignUp />\n            </Route>\n            <Route path=\"/SignIn\">\n              <SignIn />\n            </Route>\n            <Route path=\"/FirstLoginData\">\n              <FirstLoginData />\n            </Route>\n            <Route path=\"/Communications\">\n              <CommuncationsPage />\n            </Route>\n            <Route path=\"/ConfirmMail\" component={ConfirmEmail} />\n            <Route path=\"/ResetPassword\">\n              <ResetPassword />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default withStitch(withUserContext(App));\n//export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport User, { UserContext } from \"./components/UserContext\";\nimport StitchClass, { StitchContext } from \"./components/Stitch\";\n\n/*ReactDOM.render(\n  <StitchContext.Provider value={new StitchClass()}>\n    <UserContext.Provider value={new User()}>\n      <App></App>\n    </UserContext.Provider>\n  </StitchContext.Provider>,\n  document.getElementById(\"root\")\n);*/\n\nclass Index extends Component {\n  render() {\n    return (\n      <StitchContext.Provider value={new StitchClass()}>\n        <UserContext.Provider value={new User()}>\n          <App></App>\n        </UserContext.Provider>\n      </StitchContext.Provider>\n    );\n  }\n}\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n\n//ReactDOM.render(<App></App>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}