{"version":3,"sources":["components/UserContext/UserContext.js","components/UserContext/index.js","components/UserContext/User.js","components/Stitch/StitchContext.js","components/Stitch/index.js","components/Stitch/Stitch.js","components/Home.js","components/SignUp/index.js","components/ConfirmEmail.js","components/ResetPassword.js","components/App.js","serviceWorker.js","index.js"],"names":["UserContext","React","createContext","withUserContext","Component","props","Consumer","user","User","updateContext","arg","this","StitchContext","withStitch","stitch","StitchClass","logInAnonymously","a","client","auth","loginWithCredential","AnonymousCredential","then","console","log","signUpEmailPassword","authData","emailPassClient","getProviderClient","UserPasswordAuthProviderClient","factory","registerWithEmail","email","password","result","catch","err","errorHandler","confirmMail","token","tokenId","Stitch","defaultAppClient","confirmUser","initializeDefaultAppClient","onClick","state","inputChangeHandler","event","input","setState","target","value","SignUpHandler","trim","label","config","type","onChange","confirmed","queryParams","URLSearchParams","location","search","get","queryUrl","window","basename","to","path","component","ConfirmEmail","Boolean","hostname","match","ReactDOM","render","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d567090a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst UserContext = React.createContext(null);\n\nexport const withUserContext = (Component) => (props) => (\n  <UserContext.Consumer>\n    {(user) => <Component {...props} user={user} />}\n  </UserContext.Consumer>\n);\n\nexport default UserContext;\n","import UserContext, { withUserContext } from \"./UserContext\";\nimport User from \"./User\";\nexport default User;\n\nexport { UserContext, withUserContext };\n","class User {\n  constructor() {\n    this.user = false;\n  }\n  updateContext = (arg) => {\n    this.user = arg;\n  };\n}\n\nexport default User;\n","import React from \"react\";\n\nconst StitchContext = React.createContext(null);\n\nexport const withStitch = (Component) => (props) => (\n  <StitchContext.Consumer>\n    {(stitch) => <Component {...props} stitch={stitch} />}\n  </StitchContext.Consumer>\n);\n\nexport default StitchContext;\n","import StitchContext, { withStitch } from \"./StitchContext\";\nimport StitchClass from \"./Stitch\";\nexport default StitchClass;\n\nexport { StitchContext, withStitch };\n","import {\n  Stitch,\n  AnonymousCredential,\n  UserPasswordAuthProviderClient,\n  UserPasswordCredential,\n} from \"mongodb-stitch-browser-sdk\";\nimport { withUserContext } from \"../UserContext\";\nclass StitchClass {\n  constructor() {\n    /*if (process.env.APP_ID) {\n      this.appId = process.env.APP_ID;\n    }*/\n    Stitch.initializeDefaultAppClient(\"employeemanagementstitch-xrbnw\");\n    this.client = Stitch.defaultAppClient;\n  }\n  logInAnonymously = async () => {\n    let user = await this.client.auth\n      .loginWithCredential(new AnonymousCredential())\n      .then((user) => {\n        //this.props.user.updateContext(user);\n        console.log(user);\n        return user;\n      });\n    return user;\n  };\n  signUpEmailPassword = async (authData) => {\n    const emailPassClient = this.client.auth.getProviderClient(\n      UserPasswordAuthProviderClient.factory\n    );\n    let user = await emailPassClient\n      .registerWithEmail(authData.email, authData.password)\n      .then((result) => {\n        if (result) {\n          console.log(result);\n        }\n        return result;\n      })\n      .catch((err) => {\n        this.errorHandler(\"An error occurred!\");\n        console.log(err);\n      });\n    return user;\n  };\n  confirmMail = async (token, tokenId) => {\n    const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(\n      UserPasswordAuthProviderClient.factory\n    );\n    let result = await emailPassClient\n      .confirmUser(token, tokenId)\n      .then(() => {\n        return true;\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    return result;\n  };\n}\n\n//export default withUserContext(StitchClass);\nexport default StitchClass;\n","import React, { Component } from \"react\";\nimport { withUserContext } from \"./UserContext\";\nimport { withStitch } from \"./Stitch\";\n\nclass Home extends Component {\n  componentDidMount() {\n    console.log(this.props);\n  }\n  render() {\n    return (\n      <div>\n        <div>this is home page </div>\n        <button\n          onClick={() => {\n            this.props.user.updateContext(\"Hello\");\n          }}\n        >\n          update user\n        </button>\n        <button\n          onClick={async () => {\n            let user = await this.props.stitch.logInAnonymously();\n\n            console.log(user);\n            this.props.user.updateContext(user);\n            console.log(this.props);\n          }}\n        >\n          login anonymously\n        </button>\n      </div>\n    );\n  }\n}\nlet HomeWithUser = withUserContext(Home);\nexport default withStitch(HomeWithUser);\n","import React, { Component } from \"react\";\nimport {\n  Stitch,\n  UserPasswordAuthProviderClient,\n  UserPasswordCredential,\n} from \"mongodb-stitch-browser-sdk\";\n\nimport { withUserContext } from \"../UserContext\";\nimport { withStitch } from \"../Stitch\";\n\nclass SignUp extends Component {\n  state = { email: \"\", password: \"\" };\n\n  inputChangeHandler = (event, input) => {\n    this.setState({ [input]: event.target.value });\n  };\n  SignUpHandler = async () => {\n    let authData = { email: this.state.email, password: this.state.password };\n    if (authData.email.trim() === \"\" || authData.password.trim() === \"\") {\n      return;\n    }\n    let user = await this.props.stitch\n      .signUpEmailPassword(authData)\n      .then((user) => {\n        console.log(user);\n        return user;\n      });\n    console.log(user);\n  };\n  render() {\n    return (\n      <main>\n        <input\n          label=\"E-Mail\"\n          config={{ type: \"email\" }}\n          onChange={(event) => this.inputChangeHandler(event, \"email\")}\n        />\n        <input\n          label=\"Password\"\n          config={{ type: \"password\" }}\n          onChange={(event) => this.inputChangeHandler(event, \"password\")}\n        />\n        <button onClick={() => this.SignUpHandler()}>Sign Up</button>\n      </main>\n    );\n  }\n}\n\nexport default withStitch(withUserContext(SignUp));\n","import React, { Component } from \"react\";\nimport { withStitch } from \"./Stitch\";\n\nclass ConfirmEmail extends Component {\n  state = { confirmed: false };\n  componentDidMount() {\n    const queryParams = new URLSearchParams(this.props.location.search);\n    const token = queryParams.get(\"token\");\n    const tokenId = queryParams.get(\"tokenId\");\n    console.log(this.props);\n    this.props.stitch.confirmMail(token, tokenId).then((result) => {\n      console.log(result);\n      this.setState({ confirmed: result });\n    });\n  }\n  render() {\n    if (this.state.confirmed) {\n      return <div>Thank You For Confirming Your Email</div>;\n    } else {\n      return <div>confirming ...</div>;\n    }\n  }\n}\n\nexport default withStitch(ConfirmEmail);\n","import React, { Component } from \"react\";\nimport { withStitch } from \"./Stitch\";\n\nclass ResetPassword extends Component {\n  state = { confirmed: false };\n  componentDidMount() {\n    const queryUrl = window.location.search;\n    const queryParams = new URLSearchParams(queryUrl);\n    const token = queryParams.get(\"token\");\n    const tokenId = queryParams.get(\"tokenId\");\n    /*const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(\n      UserPasswordAuthProviderClient.factory\n    );\n    emailPassClient\n      .confirmUser(token, tokenId)\n      .then()\n      .catch((err) => {\n        console.log(err);\n      });*/\n  }\n  render() {\n    if (this.state.confirmed) {\n      return <div>Thank You For Confirming Your Email</div>;\n    } else {\n      return <div>confirming ...</div>;\n    }\n  }\n}\n\nexport default withStitch(ResetPassword);\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { withUserContext } from \"./UserContext\";\nimport { withStitch } from \"./Stitch\";\n\nimport Home from \"./Home\";\nimport SignUp from \"./SignUp\";\nimport ConfirmEmail from \"./ConfirmEmail\";\nimport ResetPassword from \"./ResetPassword\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename=\"/\">\n        <div>\n          <Link to=\"/SignUp\">SignUp</Link>\n          <button\n            onClick={() => {\n              console.log(this.props.user);\n            }}\n          >\n            Check User\n          </button>\n\n          <Switch>\n            <Route path=\"/SignUp\">\n              <SignUp />\n            </Route>\n            <Route path=\"/ConfirmMail\" component={ConfirmEmail} />\n            <Route path=\"/ResetPassword\">\n              <ResetPassword />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default withUserContext(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport User, { UserContext } from \"./components/UserContext\";\nimport StitchClass, { StitchContext } from \"./components/Stitch\";\n\nReactDOM.render(\n  <StitchContext.Provider value={new StitchClass()}>\n    <UserContext.Provider value={new User()}>\n      <App />\n    </UserContext.Provider>\n  </StitchContext.Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}